rule win_onhat_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-05-16"
        version = "1"
        description = "Detects win.onhat."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.onhat"
        malpedia_rule_date = "20220513"
        malpedia_hash = "7f4b2229e6ae614d86d74917f6d5b41890e62a26"
        malpedia_version = "20220516"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c684248c00000025 c684248d00000064 c684248e00000000 ffd6 83c40c }
            // n = 5, score = 200
            //   c684248c00000025     | mov                 byte ptr [esp + 0x8c], 0x25
            //   c684248d00000064     | mov                 byte ptr [esp + 0x8d], 0x64
            //   c684248e00000000     | mov                 byte ptr [esp + 0x8e], 0
            //   ffd6                 | call                esi
            //   83c40c               | add                 esp, 0xc

        $sequence_1 = { c3 8b842420010000 8b8c241c010000 25ffff0000 6a00 50 51 }
            // n = 7, score = 200
            //   c3                   | ret                 
            //   8b842420010000       | mov                 eax, dword ptr [esp + 0x120]
            //   8b8c241c010000       | mov                 ecx, dword ptr [esp + 0x11c]
            //   25ffff0000           | and                 eax, 0xffff
            //   6a00                 | push                0
            //   50                   | push                eax
            //   51                   | push                ecx

        $sequence_2 = { 32db 894c2430 c744242c01000000 e8???????? }
            // n = 4, score = 200
            //   32db                 | xor                 bl, bl
            //   894c2430             | mov                 dword ptr [esp + 0x30], ecx
            //   c744242c01000000     | mov                 dword ptr [esp + 0x2c], 1
            //   e8????????           |                     

        $sequence_3 = { 6689442412 e8???????? 83f8ff 750d 56 }
            // n = 5, score = 200
            //   6689442412           | mov                 word ptr [esp + 0x12], ax
            //   e8????????           |                     
            //   83f8ff               | cmp                 eax, -1
            //   750d                 | jne                 0xf
            //   56                   | push                esi

        $sequence_4 = { e8???????? 8be8 83c408 85ed 753a 8b442410 }
            // n = 6, score = 200
            //   e8????????           |                     
            //   8be8                 | mov                 ebp, eax
            //   83c408               | add                 esp, 8
            //   85ed                 | test                ebp, ebp
            //   753a                 | jne                 0x3c
            //   8b442410             | mov                 eax, dword ptr [esp + 0x10]

        $sequence_5 = { 33d2 25ffff0000 50 8b442440 }
            // n = 4, score = 200
            //   33d2                 | xor                 edx, edx
            //   25ffff0000           | and                 eax, 0xffff
            //   50                   | push                eax
            //   8b442440             | mov                 eax, dword ptr [esp + 0x40]

        $sequence_6 = { 89442438 8944244c 89442454 89442458 89442434 }
            // n = 5, score = 200
            //   89442438             | mov                 dword ptr [esp + 0x38], eax
            //   8944244c             | mov                 dword ptr [esp + 0x4c], eax
            //   89442454             | mov                 dword ptr [esp + 0x54], eax
            //   89442458             | mov                 dword ptr [esp + 0x58], eax
            //   89442434             | mov                 dword ptr [esp + 0x34], eax

        $sequence_7 = { 83c40c e9???????? 8b54241c 8b442420 52 }
            // n = 5, score = 200
            //   83c40c               | add                 esp, 0xc
            //   e9????????           |                     
            //   8b54241c             | mov                 edx, dword ptr [esp + 0x1c]
            //   8b442420             | mov                 eax, dword ptr [esp + 0x20]
            //   52                   | push                edx

        $sequence_8 = { 8dbc2421020000 c684242002000000 f3ab 8b4c2464 8d942488000000 66ab }
            // n = 6, score = 200
            //   8dbc2421020000       | lea                 edi, [esp + 0x221]
            //   c684242002000000     | mov                 byte ptr [esp + 0x220], 0
            //   f3ab                 | rep stosd           dword ptr es:[edi], eax
            //   8b4c2464             | mov                 ecx, dword ptr [esp + 0x64]
            //   8d942488000000       | lea                 edx, [esp + 0x88]
            //   66ab                 | stosw               word ptr es:[edi], ax

        $sequence_9 = { 56 e8???????? b14f 83c408 884c2411 b020 884c241a }
            // n = 7, score = 200
            //   56                   | push                esi
            //   e8????????           |                     
            //   b14f                 | mov                 cl, 0x4f
            //   83c408               | add                 esp, 8
            //   884c2411             | mov                 byte ptr [esp + 0x11], cl
            //   b020                 | mov                 al, 0x20
            //   884c241a             | mov                 byte ptr [esp + 0x1a], cl

    condition:
        7 of them and filesize < 57344
}