rule win_chir_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-05-16"
        version = "1"
        description = "Detects win.chir."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.chir"
        malpedia_rule_date = "20220513"
        malpedia_hash = "7f4b2229e6ae614d86d74917f6d5b41890e62a26"
        malpedia_version = "20220516"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e8???????? 48 59 8bf3 }
            // n = 4, score = 300
            //   e8????????           |                     
            //   48                   | dec                 eax
            //   59                   | pop                 ecx
            //   8bf3                 | mov                 esi, ebx

        $sequence_1 = { 0f94c1 33d2 48 8d4c0901 7410 }
            // n = 5, score = 300
            //   0f94c1               | sete                cl
            //   33d2                 | xor                 edx, edx
            //   48                   | dec                 eax
            //   8d4c0901             | lea                 ecx, [ecx + ecx + 1]
            //   7410                 | je                  0x12

        $sequence_2 = { 8811 3bf0 72e7 57 }
            // n = 4, score = 300
            //   8811                 | mov                 byte ptr [ecx], dl
            //   3bf0                 | cmp                 esi, eax
            //   72e7                 | jb                  0xffffffe9
            //   57                   | push                edi

        $sequence_3 = { 8d4c35f0 8a11 80f2fc 80c202 80f201 }
            // n = 5, score = 300
            //   8d4c35f0             | lea                 ecx, [ebp + esi - 0x10]
            //   8a11                 | mov                 dl, byte ptr [ecx]
            //   80f2fc               | xor                 dl, 0xfc
            //   80c202               | add                 dl, 2
            //   80f201               | xor                 dl, 1

        $sequence_4 = { c745f021352432 c745f451173300 e8???????? 48 59 8bfb 7419 }
            // n = 7, score = 300
            //   c745f021352432       | mov                 dword ptr [ebp - 0x10], 0x32243521
            //   c745f451173300       | mov                 dword ptr [ebp - 0xc], 0x331751
            //   e8????????           |                     
            //   48                   | dec                 eax
            //   59                   | pop                 ecx
            //   8bfb                 | mov                 edi, ebx
            //   7419                 | je                  0x1b

        $sequence_5 = { 48 8906 66837c47fe5c 75ef 8b06 33c9 }
            // n = 6, score = 300
            //   48                   | dec                 eax
            //   8906                 | mov                 dword ptr [esi], eax
            //   66837c47fe5c         | cmp                 word ptr [edi + eax*2 - 2], 0x5c
            //   75ef                 | jne                 0xfffffff1
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   33c9                 | xor                 ecx, ecx

        $sequence_6 = { 85c0 740b 48 8906 66837c47fe5c 75ef }
            // n = 6, score = 300
            //   85c0                 | test                eax, eax
            //   740b                 | je                  0xd
            //   48                   | dec                 eax
            //   8906                 | mov                 dword ptr [esi], eax
            //   66837c47fe5c         | cmp                 word ptr [edi + eax*2 - 2], 0x5c
            //   75ef                 | jne                 0xfffffff1

        $sequence_7 = { 0402 3401 0403 42 8801 3bd7 72eb }
            // n = 7, score = 300
            //   0402                 | add                 al, 2
            //   3401                 | xor                 al, 1
            //   0403                 | add                 al, 3
            //   42                   | inc                 edx
            //   8801                 | mov                 byte ptr [ecx], al
            //   3bd7                 | cmp                 edx, edi
            //   72eb                 | jb                  0xffffffed

        $sequence_8 = { 80f3fc 80c302 80f301 80c303 }
            // n = 4, score = 300
            //   80f3fc               | xor                 bl, 0xfc
            //   80c302               | add                 bl, 2
            //   80f301               | xor                 bl, 1
            //   80c303               | add                 bl, 3

        $sequence_9 = { 42 8819 3bd0 72e7 }
            // n = 4, score = 300
            //   42                   | inc                 edx
            //   8819                 | mov                 byte ptr [ecx], bl
            //   3bd0                 | cmp                 edx, eax
            //   72e7                 | jb                  0xffffffe9

    condition:
        7 of them and filesize < 286720
}